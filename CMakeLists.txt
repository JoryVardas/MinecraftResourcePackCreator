# CMakeList.txt : CMake project for MinecraftResourcePackCreator, include source and define
# project specific logic here.
#
cmake_minimum_required (VERSION 3.8)

project ("MinecraftResourcePackCreator")

# Add source to this project's executable.
#add_executable (MinecraftResourcePackCreator "MinecraftResourcePackCreator.cpp" "MinecraftResourcePackCreator.h" "Entrypoint.cpp")


set(LIBRARY_OUTPUT_PATH "${CMAKE_BINARY_DIR}")
set(EXECUTABLE_OUTPUT_PATH "${CMAKE_BINARY_DIR}")

add_compile_definitions(NANOVG_GL3_IMPLEMENTATION)

# Compile a target using NanoGUI
file (GLOB SourceFiles
    ${CMAKE_SOURCE_DIR}/src/*.cpp
    ${CMAKE_SOURCE_DIR}/src/ui/*.cpp
    ${CMAKE_SOURCE_DIR}/src/MinecraftResourcePack/*.cpp
)

add_executable(MinecraftResourcePackCreator ${SourceFiles})

set_property(TARGET MinecraftResourcePackCreator PROPERTY CXX_STANDARD 20)

target_include_directories(MinecraftResourcePackCreator PRIVATE $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/inc> PRIVATE $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/ext> PRIVATE $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/ext/nanogui/include>)

# copy the default minecraft assets if they do not already exist.
if (EXISTS ${EXECUTABLE_OUTPUT_PATH}/res/default_assets)
else()
    file(COPY ${CMAKE_SOURCE_DIR}/res/default_assets DESTINATION ${CMAKE_BINARY_DIR}/res)
endif()


# copy any json files

file (GLOB ResourceFiles ${CMAKE_SOURCE_DIR}/res/*.json)

add_custom_command(TARGET MinecraftResourcePackCreator POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy ${ResourceFiles} ${EXECUTABLE_OUTPUT_PATH}/res/)

add_dependencies(MinecraftResourcePackCreator nanogui)

# Disable building extras we won't need (pure C++ project)
set(NANOGUI_BUILD_EXAMPLE OFF CACHE BOOL " " FORCE)
set(NANOGUI_BUILD_PYTHON  OFF CACHE BOOL " " FORCE)
set(NANOGUI_INSTALL       OFF CACHE BOOL " " FORCE)


# Add the configurations from nanogui
add_subdirectory(ext/nanogui)

# For reliability of parallel build, make the NanoGUI targets dependencies
set_property(TARGET glfw glfw_objects nanogui PROPERTY FOLDER "dependencies")

# Various preprocessor definitions have been generated by NanoGUI
add_definitions(${NANOGUI_EXTRA_DEFS})

# On top of adding the path to nanogui/include, you may need extras
include_directories(${NANOGUI_EXTRA_INCS})

# Lastly, additional libraries may have been built for you.  In addition to linking
# against NanoGUI, we need to link against those as well.
target_link_libraries(MinecraftResourcePackCreator nanogui ${NANOGUI_EXTRA_LIBS})

# Get external libraries
include(FetchContent)
FetchContent_Declare(
        nlohmann_json
        URL      https://raw.githubusercontent.com/nlohmann/json/develop/single_include/nlohmann/json.hpp
        DOWNLOAD_DIR ${CMAKE_CURRENT_SOURCE_DIR}/ext/nlohmann/
        DOWNLOAD_NO_EXTRACT TRUE
)
FetchContent_Declare(
        nothings_stb_image
        URL      https://raw.githubusercontent.com/nothings/stb/master/stb_image.h
        DOWNLOAD_DIR ${CMAKE_CURRENT_SOURCE_DIR}/ext/nothings/
        DOWNLOAD_NO_EXTRACT TRUE
)
FetchContent_MakeAvailable(nlohmann_json nothings_stb_image)